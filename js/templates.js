angular.module("jslab.templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("angular/content.html","<h1>Angular</h1>\n");
$templateCache.put("angular/repl.html","<pre class=\"_cssdeck_embed\" \n	data-pane=\"js,output\" \n    data-href=\"bti360angular\">\n</pre>\n<script type=\"text/javascript\" src=\"js/cssdeck-embed.js\"></script>");
$templateCache.put("home/content.html","<h1>JS Lab</h1>\n");
$templateCache.put("home/repl.html","<div class=\"btn btn-warning btn-lg btn-gh\">\n  <a href=\"https://github.com/bti360/jslab\">View code on Github</a>\n</div>\n");
$templateCache.put("functions/content.html","<h1>Functions</h1>\n\n<p>\n	Understanding JavaScript functions, and the many ways they can be used, is one of the best ways to get your JS skills \n	to the next level.\n</p>\n\n<p>\n	There are a few different ways that you can define functions. We\'ll start with the simplest to understand, the regular\n	function declaration:\n</p>\n\n<pre class=\"code-example\">\nfunction add(x) {\n  return 4 + x;\n}\n</pre>\n\n<p>\n	We can call \"add\" elsewhere in our script with a single argument:\n</p>\n\n<pre>\n	add(3);\n</pre>\n\n<p>\n	This form of method declaration is usually best used in situations where you want to break up a larger function\'s\n	internals into separate private functions that won\'t be reused again:\n<p>\n\n<pre class=\"code-example\">\nfunction doALotOfThings() {\n  doA();\n  doB();\n\n  function doA() {\n    // code for doing \'A\'\n  }\n\n  function doB() {\n    // code for doing \'B\'\n  }\n\n}\n</pre>\n\n<p class=\"bg-warning\" style=\"padding: 1rem;\">\n	<span class=\"fa fa-exclamation-circle\"></span>&nbsp;\n	Defining functions like this at the top level of a file or script block (i.e. not in an object or within another \n	function) will put the function under the global scope, which we generally want to avoid.\n</p>\n\n<p>\n	The second way of declaring a function is on an object. This type of function is typically called a \"method\":\n<p>\n\n<pre class=\"code-example\">\nvar math = {\n  add: function(x) {\n    return 4 + x;\n  }\n};\n</pre>\n\n<p>\n	You\'ll find yourself declaring functions in this fashion often, since you\'ll either want to call a method on an\n	object or namespace functions so that they don\'t sit direction under the global namespace. To call the method above,\n	we execute it like so:\n</p>\n\n<pre>\n	math.add(3);\n</pre>\n\n<p>\n	The third way of declaring functions involves creating contructor functions. These functions allow us to create\n	and initialize JavaScript objects:\n</p>\n\n<pre class=\"code-example\">\nfunction Animal(name, type) {\n  this.name = name;\n  this.type = type;\n\n  this.sayHi = function() {\n    return \"Hi, I\'m \" + this.name + \" the \" + this.type;\n  }\n}\n</pre>\n\n<p>\n	Using this function, we can create Animal objects and use their methods to act on them. Constructors are special in \n	that you have to call it using the <code>new</code> keyword:\n</p>\n\n<pre class=\"code-example\">\nvar dumbo = new Animal(\"dumbo\", \"elephant\");\ndumbo.sayHi();\n</pre>\n\n<p class=\"bg-warning\" style=\"padding: 1rem;\">\n	<span class=\"fa fa-exclamation-circle\"></span>&nbsp;\n	Forgetting the <code>new</code> keyword can result in creating an object where the <code>this</code> is bound to the\n	global scope <code>window</code> instead of a new object\'s scope. Make sure to always use <code>new</code>!\n</p> \n\n");
$templateCache.put("functions/repl.html","<pre class=\"_cssdeck_embed\" \n	data-pane=\"js,output\" \n    data-href=\"bti360functions\">\n</pre>\n<script type=\"text/javascript\" src=\"js/cssdeck-embed.js\"></script>");
$templateCache.put("objects/content.html","<h1>Objects</h1>\n\n<p>\n	JavaScript objects are a structure made up of key/value pairs. The keys are strings, and the values can be any \n	JavaScript value or object, including functions. Here is the simplest way to create an object:\n</p>\n\n<pre class=\"code-example\">\nvar obj = {};\n</pre>\n\n<p>This creates an empty object with default object properties. Let\'s look at a more interesting example:</p>\n\n<pre class=\"code-example\">\nvar obj = {\n  \"name\": \"Js Lab\",\n  \"numberOfChapters\": 6,\n  \"getAuthors\": function() {\n    return \"Ryan Brady & Kyle Roberts\"\n  }\n};\n</pre>\n\n<p>\n	The object above contains three properties of different types. We can read any of these properties by calling the\n	property on the object using either dot notation or bracket notation:\n</p>\n\n<pre class=\"code-example\">\nobj.name;\nobj[\'name\'];\n\nobj.numberOfChapters;\nobj[\'numberOfChapters\'];\n\nobj.getAuthors();\nobj[\'getAuthors\']();\n</pre>\n\n<p>\n	The dot notation is usually preferable due to its better readability, but the bracket notation can be useful if we\'re\n	calling the property with a variable string.\n</p>\n\n<h3>References</h3>\n\n\n\n");
$templateCache.put("objects/repl.html","<pre class=\"_cssdeck_embed\" \n	data-pane=\"js,output\" \n    data-href=\"bti360objects\">\n</pre>\n<script type=\"text/javascript\" src=\"js/cssdeck-embed.js\"></script>");
$templateCache.put("angular/controllers/content.html","<h1>Angular Controllers</h1>\n");
$templateCache.put("angular/controllers/repl.html","<pre class=\"_cssdeck_embed\" \n	data-pane=\"js,output\" \n    data-href=\"bti360angular-controllers\">\n</pre>\n<script type=\"text/javascript\" src=\"js/cssdeck-embed.js\"></script>");
$templateCache.put("angular/directives/content.html","<h1>Angular Directives</h1>\n");
$templateCache.put("angular/directives/repl.html","<pre class=\"_cssdeck_embed\" \n	data-pane=\"js,output\" \n    data-href=\"bti360angular-directives\">\n</pre>\n<script type=\"text/javascript\" src=\"js/cssdeck-embed.js\"></script>");
$templateCache.put("angular/routing/content.html","<h1>Angular Routing</h1>\n");
$templateCache.put("angular/routing/repl.html","<pre class=\"_cssdeck_embed\" \n	data-pane=\"js,output\" \n    data-href=\"bti360angular-routing\">\n</pre>\n<script type=\"text/javascript\" src=\"js/cssdeck-embed.js\"></script>");
$templateCache.put("components/cssdeck/cssdeck.html","<span id=\"{{code}}\">Code: {{code}}</span>");
$templateCache.put("components/editor/editor.html","<div ui-ace=\"{\n  useWrapMode : true,\n  theme:\'monokai\',\n  mode: \'javascript\',\n  onLoad: aceLoaded,\n  onChange: aceChanged\n}\" ng-model=\"code\"></div>\n<hr/>\n<div>\n  <pre>\n    <span ng-repeat=\"row in results track by $index\">\n      {{$index + 1}}: {{row}}<br/>\n    </span>\n  </pre>\n</div>\n");}]);